{"version":3,"sources":["serviceWorker.js","Components/TestingComponent.jsx","Pages/TestPage.jsx","Contexts/UserStore.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","TestingComponent","onClick","TestPage","cookies","Cookies","UserContext","React","createContext","initialState","isAuthenticated","username","password","jwt_token","type","reducer","state","action","user_object","payload","user","jwt","set","path","remove","console","log","newField","App","useReducer","userReducer","userInitialState","dispatch","Provider","value","className","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+PAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mCChBS,SAASC,IAGpB,OACI,2DAEI,4BAAQC,QAAW,cAAnB,aCJG,SAASC,IAKpB,OACI,+EAGI,kBAACF,EAAD,O,YCVNG,EAAU,I,MAAIC,GACdC,EAAcC,IAAMC,gBAIpBC,EAAe,CACnBC,iBAAiB,EACjBC,SAAU,KACVC,SAAU,KACVC,UAAW,KACXC,KAAO,MAKHC,EAAU,SAACC,EAAOC,GACtB,OAAQA,EAAOH,MACb,IAAK,QAED,IAAMI,EAAW,eACVF,EADU,CAEbN,iBAAiB,EACjBC,SAAUM,EAAOE,QAAQC,KACzBR,SAAWK,EAAOE,QAAQP,SAC1BE,KAAOG,EAAOE,QAAQL,KACtBD,UAAWI,EAAOE,QAAQE,MAM9B,OAFAjB,EAAQkB,IAAI,OAAQJ,EAAc,CAAEK,KAAM,MAEnCL,EAEX,IAAK,SAEH,OADAd,EAAQoB,OAAO,QACRf,EAET,IAAK,OAEH,OADAgB,QAAQC,IAAI,QACL,eAAIV,EAAX,CAAmBW,SAAWV,EAAOE,UACvC,QACE,OAAOH,ICLEY,MA1Bf,WAAgB,IAAD,EAEarB,IAAMsB,WAAWC,EAAaC,GAF3C,mBAENf,EAFM,KAECgB,EAFD,KAKb,OACE,kBAAC,IAAD,KACE,kBAAC1B,EAAY2B,SAAb,CACEC,MAAO,CACLlB,QACAgB,aAGF,yBAAKG,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOZ,KAAK,SAEV,kBAACpB,EAAD,YCxBdiC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SL6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.b252e505.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nexport default function TestingComponent() {\r\n\r\n    \r\n    return (\r\n        <div>\r\n            This is a testing Component\r\n            <button onClick = {() => {}}>Click Me</button>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport TestingComponent from '../Components/TestingComponent';\r\n\r\n\r\nexport default function TestPage() {\r\n\r\n\r\n    \r\n\r\n    return (\r\n        <div>\r\n            \r\n            This Is A test Page Created For testing purpose\r\n            <TestingComponent/>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\"\r\nimport Cookies from 'universal-cookie';\r\n\r\nconst cookies = new Cookies();\r\nconst UserContext = React.createContext();\r\n//Central Storage of user state shared across all components\r\n\r\n//Initial state to User context\r\nconst initialState = {\r\n  isAuthenticated: false,\r\n  username: null,\r\n  password: null,\r\n  jwt_token: null,\r\n  type : null\r\n};\r\n\r\n//Reducer function to Login and store user credential in browser state  \r\n//Never rewrite the state , Always Append \r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"LOGIN\":   \r\n\r\n        const user_object = {\r\n            ...state,\r\n            isAuthenticated: true,\r\n            username: action.payload.user,\r\n            password : action.payload.password,\r\n            type : action.payload.type,\r\n            jwt_token: action.payload.jwt\r\n        }\r\n\r\n        //Storing the jwt for future requests  \r\n        cookies.set(\"USER\", user_object , { path: '/' }); \r\n      \r\n        return user_object;\r\n     \r\n    case \"LOGOUT\":\r\n      cookies.remove(\"USER\")\r\n      return initialState\r\n\r\n    case \"TEST\":\r\n      console.log(\"TEST\")\r\n      return {...state , newField : action.payload};\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport{reducer , initialState , UserContext}","import React from 'react';\r\nimport './App.css';\r\n\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport TestPage from './Pages/TestPage';\r\n\r\nimport {initialState as userInitialState, UserContext , reducer as userReducer} from \"./Contexts/UserStore\"\r\n\r\nfunction App() {\r\n\r\n  const [state, dispatch] = React.useReducer(userReducer, userInitialState);\r\n  \r\n\r\n  return (\r\n    <Router>\r\n      <UserContext.Provider\r\n        value={{\r\n          state,\r\n          dispatch\r\n        }}\r\n      >\r\n        <div className=\"App\">\r\n          <Switch>\r\n            <Route path=\"/test\">\r\n              {/* This page is for Testing Purposes Only */}\r\n              <TestPage />\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n      </UserContext.Provider>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}